@page "/profile"
@using VibeQuestApp.Data
@using VibeQuestApp.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

<h3>Hero Profile</h3>

@if (user == null)
{
    <p class="text-danger">No user session found. Please <a href="/login">log in</a>.</p>
}
else if (heroProfile == null)
{
    <p>Loading profile...</p>
}
else
{
    <div class="card p-3">
        @if (!string.IsNullOrWhiteSpace(heroProfile.AvatarUrl))
        {
            <img src="@heroProfile.AvatarUrl"
                 alt="Hero Avatar"
                 class="img-thumbnail mb-3"
                 style="max-width: 300px; height: auto; object-fit: cover;"
                 onerror="this.src='/images/default-avatar.png'" />
        }


        <h4>@heroProfile.HeroName</h4>
        <p><strong>Level:</strong> @heroProfile.Level</p>
        <p><strong>Total XP:</strong> @heroProfile.TotalXP</p>

        <div class="mb-3">
            <label><strong>XP Progress:</strong></label>
            <div class="progress">
                <div class="progress-bar" role="progressbar"
                     style="width:@XpPercentage"
                     aria-valuenow="@heroProfile.CurrentXP"
                     aria-valuemin="0"
                     aria-valuemax="@XpForNextLevel">
                    @heroProfile.CurrentXP / @XpForNextLevel XP
                </div>
            </div>
        </div>

        <p><strong>Focus Areas:</strong> @heroProfile.LifeFocusAreas</p>
        <p><strong>Primary Goals:</strong> @heroProfile.PrimaryGoals</p>
        <p><strong>Long-Term Vision:</strong> @heroProfile.LongTermVision</p>
        <p><strong>Motivation Style:</strong> @heroProfile.MotivationStyle</p>
        <p><strong>Commitment Level:</strong> @heroProfile.CommitmentLevel</p>
        <p><strong>Daily Reset Time:</strong> @heroProfile.DailyResetTime.ToString(@"hh\:mm")</p>
    </div>
}

@code {
    private HeroProfile? heroProfile;

    private int XpForNextLevel => (int)Math.Pow((heroProfile?.Level ?? 1), 2) * 100;
    private string XpPercentage =>
        heroProfile is null ? "0%" :
        $"{Math.Clamp((double)heroProfile.CurrentXP / XpForNextLevel * 100, 0, 100):F0}%";

    private User? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        heroProfile = await Db.HeroProfiles.FirstOrDefaultAsync(p => p.UserId == user.Id);
    }
}
