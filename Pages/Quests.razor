@page "/quests"
@using Microsoft.EntityFrameworkCore
@using VibeQuestApp.Models
@using VibeQuestApp.Data
@using VibeQuestApp.Services
@inject AppDbContext Db
@inject UserSessionService Session
@inject QuestService QuestService

<h3 class="mt-3">Quest Board</h3>
<p>Complete daily quests to earn XP and level up!</p>

<button class="btn btn-primary mb-3" @onclick="() => showCreateForm = !showCreateForm">
    @(showCreateForm ? "Cancel" : "+ New Quest")
</button>

@if (showCreateForm)
{
    <EditForm Model="newQuest" OnValidSubmit="CreateQuest">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Title:</label>
            <InputText class="form-control" @bind-Value="newQuest.Title" />
        </div>

        <div class="mb-3">
            <label class="form-label">Description:</label>
            <InputTextArea class="form-control" @bind-Value="newQuest.Description" />
        </div>

        <div class="mb-3">
            <label class="form-label">Category:</label>
            <InputSelect class="form-select" @bind-Value="newQuest.Category">
                <option value="">-- Select Category --</option>
                <option>Health</option>
                <option>Creativity</option>
                <option>Productivity</option>
                <option>Learning</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">XP Reward:</label>
            <InputNumber class="form-control" @bind-Value="newQuest.XpReward" />
        </div>

        <div class="mb-3">
            <label class="form-label">Due Date:</label>
            <InputDate class="form-control" @bind-Value="newQuest.DueDate" />
        </div>

        <button type="submit" class="btn btn-success">Add Quest</button>
    </EditForm>
}

@if (quests == null)
{
    <p>Loading quests...</p>
}
else
{
    <div class="mt-4">
        <h5>Current Quests</h5>
        @if (!quests.Any(q => !q.IsCompleted))
        {
            <p class="text-muted">No current quests.</p>
        }
        else
        {
            <div class="list-group mb-4">
                @foreach (var quest in quests.Where(q => !q.IsCompleted))
                {
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@quest.Title</strong>
                                <p class="mb-1">@quest.Description</p>
                                <small>XP: @quest.XpReward | Due: @(quest.DueDate?.ToShortDateString() ?? "No due date")</small>
                            </div>
                            <button class="btn btn-success" @onclick="() => CompleteQuest(quest.Id)">Complete</button>
                        </div>
                    </div>
                }
            </div>
        }

        <h5>Completed Quests</h5>
        @if (!quests.Any(q => q.IsCompleted && !hiddenCompletedIds.Contains(q.Id)))
        {
            <p class="text-muted">No completed quests yet.</p>
        }
        else
        {
            <div class="list-group">
                @foreach (var quest in quests.Where(q => q.IsCompleted && !hiddenCompletedIds.Contains(q.Id)))
                {
                    <div class="list-group-item bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@quest.Title</strong>
                                <p class="mb-1">@quest.Description</p>
                                <small class="text-muted">XP: @quest.XpReward | Completed</small>
                            </div>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => HideQuest(quest.Id)">❌ Hide</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<Quest>? quests;
    private Quest newQuest = new();
    private bool showCreateForm = false;
    private HashSet<int> hiddenCompletedIds = new();

    private string? currentUserId => Session.CurrentUser?.Id;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuests();
    }

    private async Task LoadQuests()
    {
        if (currentUserId == null) return;

        quests = await Db.Quests
            .Where(q => q.UserId == currentUserId)
            .OrderByDescending(q => q.IsCompleted)
            .ThenBy(q => q.DueDate)
            .ToListAsync();
    }

    private async Task CompleteQuest(int questId)
    {
        if (currentUserId == null) return;

        bool success = await QuestService.CompleteQuestAsync(questId, currentUserId);

        if (success)
        {
            await LoadQuests();
        }
    }

    private async Task CreateQuest()
    {
        if (currentUserId == null) return;

        newQuest.UserId = currentUserId;
        newQuest.IsCompleted = false;
        Db.Quests.Add(newQuest);
        await Db.SaveChangesAsync();

        newQuest = new Quest(); // reset form
        showCreateForm = false;

        await LoadQuests();
    }

    private void HideQuest(int questId)
    {
        hiddenCompletedIds.Add(questId);
    }
}
