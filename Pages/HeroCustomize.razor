@page "/hero-customize"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using VibeQuestApp.Data
@using VibeQuestApp.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject IWebHostEnvironment Env
@inject NavigationManager NavigationManager

<h3>Create Your Hero!</h3>
<p>Begin your journey by creating your hero. Choose a name, define your path, and set your intentions.</p>

@if (heroProfile == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="heroProfile" OnValidSubmit="SaveProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Hero Name:</label><br />
            <InputText @bind-Value="heroProfile.HeroName" class="form-control" />
        </div>

        <div>
            <label>Upload Avatar:</label><br />
            <InputFile OnChange="HandleImageUpload" />
        </div>

        @if (!string.IsNullOrWhiteSpace(heroProfile.AvatarUrl))
        {
            <img src="@heroProfile.AvatarUrl" alt="Avatar Preview" style="max-height: 120px; margin: 10px 0;" />
        }

        <div>
            <label>Life Focus Areas:</label><br />
            @foreach (var area in AvailableFocusAreas)
            {
                <div class="form-check">
                    <input type="checkbox"
                           class="form-check-input"
                           checked="@(SelectedFocusAreas?.Contains(area) ?? false)"
                           @onchange="@((ChangeEventArgs e) => ToggleFocusArea(area, e.Value?.ToString() == "true"))" />
                    <label class="form-check-label">@area</label>
                </div>
            }
        </div>

        <div>
            <label>Primary Goals:</label><br />
            <InputTextArea @bind-Value="heroProfile.PrimaryGoals" class="form-control" />
        </div>

        <div>
            <label>Long-Term Vision:</label><br />
            <InputTextArea @bind-Value="heroProfile.LongTermVision" class="form-control" />
        </div>

        <div>
            <label>Motivation Style:</label><br />
            <InputSelect @bind-Value="heroProfile.MotivationStyle" class="form-control">
                <option value="">-- Select --</option>
                <option>Rewards</option>
                <option>Milestones</option>
                <option>Encouragement</option>
                <option>Progress Bars</option>
            </InputSelect>
        </div>

        <div>
            <label>Commitment Level:</label><br />
            <InputSelect @bind-Value="heroProfile.CommitmentLevel" class="form-control">
                <option value="">-- Select --</option>
                <option>Casual</option>
                <option>Balanced</option>
                <option>Hardcore</option>
            </InputSelect>
        </div>

        <div>
            <label>Daily Reset Time (HH:mm):</label><br />
            <InputText @bind-Value="dailyResetTimeString" class="form-control" />
        </div>

        <br />
        <button class="btn btn-success">Continue</button>
    </EditForm>
}

@code {
    private HeroProfile? heroProfile;
    private IBrowserFile? uploadedFile;
    private HashSet<string> SelectedFocusAreas = new();
    private List<string> AvailableFocusAreas = new()
    {
        "Health", "Career", "Relationships", "Creativity", "Finances", "Personal Development"
    };

    private string dailyResetTimeString
    {
        get => heroProfile?.DailyResetTime.ToString(@"hh\:mm") ?? "04:00";
        set
        {
            if (TimeSpan.TryParse(value, out var parsed) && heroProfile is not null)
            {
                heroProfile.DailyResetTime = parsed;
            }
        }
    }

    private int currentUserId = 1;

    protected override async Task OnInitializedAsync()
    {
        if (!await Db.Users.AnyAsync(u => u.Id == currentUserId))
        {
            Db.Users.Add(new User { Id = currentUserId, Email = "test@vibequest.com", PasswordHash = "temp" });
            await Db.SaveChangesAsync();
        }

        heroProfile = await Db.HeroProfiles.FirstOrDefaultAsync(h => h.UserId == currentUserId);

        if (heroProfile == null)
        {
            heroProfile = new HeroProfile
            {
                UserId = currentUserId,
                DailyResetTime = TimeSpan.FromHours(4)
            };
            Db.HeroProfiles.Add(heroProfile);
            await Db.SaveChangesAsync();
        }

        if (!string.IsNullOrWhiteSpace(heroProfile.LifeFocusAreas))
        {
            SelectedFocusAreas = heroProfile.LifeFocusAreas
                .Split(",", StringSplitOptions.RemoveEmptyEntries)
                .Select(f => f.Trim())
                .ToHashSet();
        }
    }

    private void ToggleFocusArea(string area, bool isChecked)
    {
        if (isChecked)
            SelectedFocusAreas.Add(area);
        else
            SelectedFocusAreas.Remove(area);

        if (heroProfile is not null)
            heroProfile.LifeFocusAreas = string.Join(", ", SelectedFocusAreas);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        var ext = Path.GetExtension(uploadedFile.Name);
        var fileName = $"{Guid.NewGuid()}{ext}";

        if (Env?.WebRootPath is null)
        {
            throw new InvalidOperationException("WebRootPath is not configured.");
        }

        var savePath = Path.Combine(Env.WebRootPath, "uploads", fileName);
        Directory.CreateDirectory(Path.GetDirectoryName(savePath)!);

        await using FileStream fs = new(savePath, FileMode.Create);
        await uploadedFile.OpenReadStream().CopyToAsync(fs);

        if (heroProfile != null)
        {
            heroProfile.AvatarUrl = $"/uploads/{fileName}";
        }
    }

    private async Task SaveProfile()
    {
        if (heroProfile is not null)
        {
            heroProfile.LifeFocusAreas = string.Join(", ", SelectedFocusAreas);
            Db.HeroProfiles.Update(heroProfile);
            await Db.SaveChangesAsync();
            NavigationManager.NavigateTo("/profile");
        }
    }
}
