@page "/xp-dashboard"
@using VibeQuestApp.Models
@using VibeQuestApp.Data
@inject AppDbContext Db

<h3>XP Dashboard</h3>
<p class="text-muted">Track your experience points, level progression, and milestones.</p>

@if (heroProfile == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card shadow-sm p-4 mb-4">
        <h4>@heroProfile.HeroName's Progress</h4>
        <p><strong>Current Level:</strong> @currentLevel</p>
        <p><strong>Total XP:</strong> @heroProfile.TotalXP</p>

        <div class="progress mb-2" style="height: 25px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: @xpPercent%" aria-valuenow="@xpPercent" aria-valuemin="0" aria-valuemax="100">
                @xpPercent%
            </div>
        </div>
        <p><small>@xpToNextLevel XP to next level (@nextLevel)</small></p>
    </div>
}

@code {
    private HeroProfile? heroProfile;
    private int currentLevel = 1;
    private int nextLevel => currentLevel + 1;
    private int xpToNextLevel = 0;
    private int xpPercent = 0;
    private int currentUserId = 1; // Replace with actual user ID logic

    protected override async Task OnInitializedAsync()
    {
        heroProfile = await Db.HeroProfiles.FindAsync(currentUserId);

        if (heroProfile != null)
        {
            currentLevel = CalculateLevel(heroProfile.TotalXP);
            var requiredXPForCurrent = RequiredXPForLevel(currentLevel);
            var requiredXPForNext = RequiredXPForLevel(nextLevel);
            xpToNextLevel = requiredXPForNext - heroProfile.TotalXP;
            var xpGainedInLevel = heroProfile.TotalXP - requiredXPForCurrent;
            var xpNeededThisLevel = requiredXPForNext - requiredXPForCurrent;
            xpPercent = xpNeededThisLevel > 0 ? (int)((double)xpGainedInLevel / xpNeededThisLevel * 100) : 100;
        }
    }

    private int CalculateLevel(int xp)
    {
        // Example leveling curve: level = sqrt(xp / 100)
        return (int)Math.Floor(Math.Sqrt(xp / 100.0));
    }

    private int RequiredXPForLevel(int level)
    {
        // XP needed to reach the given level
        return (int)Math.Pow(level, 2) * 100;
    }
}