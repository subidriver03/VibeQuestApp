@page "/register"
@using System.ComponentModel.DataAnnotations
@using VibeQuestApp.Models
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject AppDbContext Db
@inject NavigationManager NavigationManager

<h3>Create Your Account</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

<EditForm Model="registrationModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label><br />
        <InputText @bind-Value="registrationModel.Email" class="form-control" />
    </div>

    <div>
        <label>Password:</label><br />
        <InputText @bind-Value="registrationModel.Password" type="password" class="form-control" />
    </div>

    <div>
        <label>Confirm Password:</label><br />
        <InputText @bind-Value="registrationModel.ConfirmPassword" type="password" class="form-control" />
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegistrationModel registrationModel = new();
    private string? ErrorMessage;

    public class RegistrationModel
    {
        [Required, EmailAddress]
        public string? Email { get; set; }

        [Required, MinLength(6)]
        public string? Password { get; set; }

        [Required, Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string? ConfirmPassword { get; set; }
    }

    private async Task HandleRegister()
    {
        var exists = await UserManager.FindByEmailAsync(registrationModel.Email!) != null;
        if (exists)
        {
            ErrorMessage = "That email is already registered.";
            return;
        }

        var user = new User
        {
            Email = registrationModel.Email!,
            UserName = registrationModel.Email!
        };

        var createResult = await UserManager.CreateAsync(user, registrationModel.Password!);
        if (!createResult.Succeeded)
        {
            ErrorMessage = string.Join("; ", createResult.Errors.Select(e => e.Description));
            return;
        }

        // Create default HeroProfile for new user
        var profile = new HeroProfile
        {
            UserId = user.Id,
            HeroName = "New Hero",
            AvatarUrl = "",
            LifeFocusAreas = "",
            PrimaryGoals = "",
            LongTermVision = "",
            MotivationStyle = "",
            CommitmentLevel = "",
            DailyResetTime = TimeSpan.FromHours(4),
            Level = 1,
            CurrentXP = 0,
            TotalXP = 0
        };

        Db.HeroProfiles.Add(profile);
        await Db.SaveChangesAsync();

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo("/profile");
    }
}
