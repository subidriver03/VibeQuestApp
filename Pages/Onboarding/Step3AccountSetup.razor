@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using VibeQuestApp.Data
@using VibeQuestApp.Models
@using VibeQuestApp.Services
@inject AppDbContext Db
@inject UserSessionService Session

<EditForm Model="this" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h4>Step 3: Create Your Account</h4>

    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="Email" class="form-control" />
        <ValidationMessage For="@(() => Email)" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText type="password" @bind-Value="Password" class="form-control" />
        <ValidationMessage For="@(() => Password)" />
    </div>

    <div class="mb-3">
        <label>Confirm Password</label>
        <InputText type="password" @bind-Value="ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => ConfirmPassword)" />
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    @if (formSubmittedSuccessfully)
    {
        <div class="alert alert-success">🎉 Account created successfully!</div>
    }
</EditForm>

@code {
    [Parameter] public OnboardingStateService StateService { get; set; } = default!;

    [Required, EmailAddress]
    public string Email { get; set; } = "";

    [Required, MinLength(6)]
    public string Password { get; set; } = "";

    [Required, Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
    public string ConfirmPassword { get; set; } = "";

    public string? ErrorMessage { get; set; }
    private bool formSubmittedSuccessfully = false;

    private async Task HandleFormSubmit()
    {
        var success = await SubmitFormAsync();
        formSubmittedSuccessfully = success;
    }

    public async Task<bool> SubmitFormAsync()
    {
        ErrorMessage = null;
        var validationContext = new ValidationContext(this);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(this, validationContext, validationResults, true);

        if (!isValid)
            return false;

        return await HandleFinalStep();
    }

    private async Task<bool> HandleFinalStep()
    {
        var exists = await Db.Users.AnyAsync(u => u.Email == Email);
        if (exists)
        {
            ErrorMessage = "This email is already registered.";
            return false;
        }

        var hashed = BCrypt.Net.BCrypt.HashPassword(Password);

        var user = new User
        {
            Email = Email,
            UserName = Email,
            PasswordHash = hashed
        };

        Db.Users.Add(user);
        await Db.SaveChangesAsync();

        var profile = new HeroProfile
        {
            UserId = user.Id,
            HeroName = StateService.HeroProfile.HeroName,
            AvatarUrl = StateService.HeroProfile.AvatarUrl,
            LifeFocusAreas = StateService.HeroProfile.LifeFocusAreas,
            PrimaryGoals = StateService.HeroProfile.PrimaryGoals,
            LongTermVision = StateService.HeroProfile.LongTermVision,
            MotivationStyle = StateService.HeroProfile.MotivationStyle,
            CommitmentLevel = StateService.HeroProfile.CommitmentLevel,
            DailyResetTime = StateService.HeroProfile.DailyResetTime,
            Level = 1,
            CurrentXP = 0,
            TotalXP = 0
        };

        Db.HeroProfiles.Add(profile);
        await Db.SaveChangesAsync();

        Session.SetUser(user);

        return true;
    }

    private Task HandleValidSubmit()
    {
        // No-op, form submission is manually triggered with HandleFormSubmit
        return Task.CompletedTask;
    }
}
