@page "/journal"
@using VibeQuestApp.Data
@using VibeQuestApp.Models
@using VibeQuestApp.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject UserSessionService Session

<PageTitle>Journal</PageTitle>

<h3>Daily Journal</h3>

@if (!string.IsNullOrEmpty(prompt))
{
    <blockquote class="blockquote text-muted">
        <small><em>Prompt:</em> "@prompt"</small>
    </blockquote>
}

<div class="mb-3">
    <label>Mood:</label>
    <InputSelect @bind-Value="newEntry.Mood" @onchange="OnMoodChanged" class="form-select mb-2" TValue="string">
        <option value="">-- Select Mood --</option>
        <option>Happy</option>
        <option>Neutral</option>
        <option>Stressed</option>
    </InputSelect>

    @if (!string.IsNullOrWhiteSpace(moodMessage))
    {
        <div class="alert alert-secondary">
            <em>@moodMessage</em>
        </div>
    }

    <textarea class="form-control" @bind="newEntry.Content" placeholder="Write your thoughts here..." rows="5"></textarea>
    <button class="btn btn-primary mt-2" @onclick="SaveEntry">Save Entry</button>
</div>

<hr />
<h5>📈 Journal Stats</h5>
<ul class="list-group mb-4">
    <li class="list-group-item">Total Entries: @entries.Count</li>
    <li class="list-group-item">Current Streak: @currentStreak days</li>
    <li class="list-group-item">XP Earned from Journaling: @xpEarned</li>
</ul>

@if (entries.Any())
{
    <h4>Your Past Entries</h4>
    <ul class="list-group">
        @foreach (var entry in entries.OrderByDescending(e => e.DateCreated))
        {
            <li class="list-group-item">
                <strong>@entry.DateCreated.ToShortDateString()</strong> <span class="badge bg-secondary">@entry.Mood</span>
                <p>@entry.Content</p>
            </li>
        }
    </ul>
}
else
{
    <p>No journal entries yet. Start writing to reflect on your journey.</p>
}

@code {
    private List<JournalEntry> entries = new();
    private JournalEntry newEntry = new();
    private HeroProfile? profile;
    private string? currentUserId => Session.CurrentUser?.Id;

    private string? prompt;
    private int currentStreak = 0;
    private int xpEarned = 0;
    private string? moodMessage;

    private readonly int dailyXp = 10;
    private readonly int weeklyBonusXp = 50;

    private readonly string[] prompts = new[]
    {
        "What are you grateful for today?",
        "What challenge did you overcome recently?",
        "Describe a moment you felt peace this week.",
        "What's something you're looking forward to?",
        "If today was a book chapter, what would its title be?"
    };

    protected override async Task OnInitializedAsync()
    {
        if (currentUserId == null)
        {
            return;
        }

        prompt = prompts[new Random().Next(prompts.Length)];

        entries = await Db.JournalEntries
            .Where(e => e.UserId == currentUserId)
            .OrderByDescending(e => e.DateCreated)
            .ToListAsync();

        profile = await Db.HeroProfiles.FirstOrDefaultAsync(h => h.UserId == currentUserId);

        currentStreak = CalculateStreak();
        xpEarned = entries.Count * dailyXp + (currentStreak / 7) * weeklyBonusXp;
    }

    private async Task SaveEntry()
    {
        if (currentUserId == null)
            return;

        newEntry.UserId = currentUserId;
        newEntry.DateCreated = DateTime.Now;
        Db.JournalEntries.Add(newEntry);

        if (profile != null)
        {
            bool isFirstToday = !entries.Any(e => e.DateCreated.Date == DateTime.Today);

            profile.CurrentXP += dailyXp;
            profile.TotalXP += dailyXp;

            if (isFirstToday && (CalculateStreak() + 1) % 7 == 0)
            {
                profile.CurrentXP += weeklyBonusXp;
                profile.TotalXP += weeklyBonusXp;
            }

            profile.Level = (int)Math.Floor(Math.Sqrt(profile.TotalXP / 100.0)) + 1;
            Db.HeroProfiles.Update(profile);
        }

        await Db.SaveChangesAsync();
        entries.Insert(0, newEntry);
        newEntry = new JournalEntry();
        currentStreak = CalculateStreak();
        moodMessage = null;
    }

    private void OnMoodChanged(ChangeEventArgs e)
    {
        var selectedMood = e.Value?.ToString();
        newEntry.Mood = selectedMood;

        moodMessage = selectedMood switch
        {
            "Happy" => "That’s wonderful to hear! Keep embracing what brings you joy.",
            "Neutral" => "Even in stillness, there’s clarity. Reflect on what brought you here today.",
            "Stressed" => "Take a breath. Writing can help release the pressure—you're not alone.",
            _ => null
        };
    }

    private int CalculateStreak()
    {
        var distinctDates = entries
            .Select(e => e.DateCreated.Date)
            .Distinct()
            .OrderByDescending(d => d)
            .ToList();

        if (!distinctDates.Any()) return 0;

        int streak = 0;
        var today = DateTime.Today;

        for (int i = 0; i < distinctDates.Count; i++)
        {
            var expectedDate = today.AddDays(-i);
            if (distinctDates[i] == expectedDate)
            {
                streak++;
            }
            else
            {
                break;
            }
        }

        return streak;
    }
}
