@page "/reward-store"
@using VibeQuestApp.Models
@using VibeQuestApp.Services
@inject RewardStoreService RewardService
@inject UserSessionService UserSession
@inject NavigationManager Navigation

<PageTitle>Reward Store</PageTitle>

<h2 class="mt-3">🎁 Reward Store</h2>
<p>Spend your Hero Coins on rewards that motivate you to keep going!</p>

@if (heroProfile == null)
{
    <p>Loading your profile...</p>
}
else
{
    <p><strong>Your Hero Coins:</strong> 🪙 @heroProfile.HeroCoins</p>

    @if (AvailableRewards.Count == 0)
    {
        <p>No rewards available yet. Check back soon!</p>
    }
    else
    {
        <div class="row">
            @foreach (var reward in AvailableRewards)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@reward.Emoji @reward.Title</h5>
                            <p class="card-text">@reward.Description</p>
                            <p><strong>Cost:</strong> @reward.CoinCost 🪙</p>
                            <button class="btn btn-primary" @onclick="() => RedeemReward(reward)">Redeem</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@code {
    private HeroProfile? heroProfile;
    private string? successMessage;

    private List<RewardItem> AvailableRewards = new()
    {
        new RewardItem { Title = "Netflix Night", Description = "Watch a guilt-free episode of your favorite show.", CoinCost = 2, Emoji = "📺" },
        new RewardItem { Title = "Coffee Treat", Description = "Enjoy a fancy coffee or tea from your favorite spot.", CoinCost = 1, Emoji = "☕" },
        new RewardItem { Title = "Game Break", Description = "Take 30 minutes to play your favorite video game.", CoinCost = 3, Emoji = "🎮" }
    };

    protected override async Task OnInitializedAsync()
    {
        var userId = UserSession.CurrentUser?.Id;

        if (string.IsNullOrEmpty(userId))
        {
            successMessage = "Unable to identify user.";
            return;
        }

        heroProfile = await RewardService.GetHeroProfileAsync(userId); // <-- implement this in RewardStoreService
    }

    private async Task RedeemReward(RewardItem reward)
    {
        if (heroProfile is null)
        {
            successMessage = "Error loading user profile.";
            return;
        }

        if (heroProfile.HeroCoins >= reward.CoinCost)
        {
            heroProfile.HeroCoins -= reward.CoinCost;
            await RewardService.UpdateHeroCoinsAsync(heroProfile); // <-- implement this in RewardStoreService

            successMessage = $"You redeemed: {reward.Title}!";
        }
        else
        {
            successMessage = $"Not enough Hero Coins to redeem: {reward.Title}.";
        }
    }

    private class RewardItem
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int CoinCost { get; set; }
        public string Emoji { get; set; } = "🎁";
    }
}
