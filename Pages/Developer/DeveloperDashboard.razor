@page "/developer/dashboard"
@inject DevToolService DevToolService
@inject UserManager<User> UserManager
@using VibeQuestApp.Data
@using VibeQuestApp.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms

<h2 class="text-primary">🛠️ Developer Dashboard</h2>

@if (selectedUser == null)
{
    <p><em>Loading users...</em></p>
}
else
{
    <div class="card mb-4">
        <div class="card-body">
            <label><strong>Select User:</strong></label>
            <select class="form-select mb-3" @onchange="OnUserSelected">
                @foreach (var u in allUsers)
                {
                    var hero = allProfiles.FirstOrDefault(p => p.UserId == u.Id);
                    <option value="@u.Id" selected="@((u.Id == selectedUser.Id))">
                        @(hero?.HeroName ?? "Unnamed Hero") (@u.Email)
                    </option>
                }
            </select>

            <h5 class="card-title">User: <strong>@selectedUser.DisplayName</strong></h5>
            <p><strong>Email:</strong> @selectedUser.Email</p>
            <p><strong>User ID:</strong> @selectedUser.Id</p>
        </div>
    </div>

    @if (selectedProfile != null)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Hero Profile</h5>

                @if (!string.IsNullOrWhiteSpace(selectedProfile.AvatarUrl))
                {
                    <img src="@selectedProfile.AvatarUrl" alt="Avatar" class="img-thumbnail mb-3" style="max-width: 150px;" />
                }

                <div class="mb-3">
                    <label><strong>Change Profile Picture:</strong></label>
                    <InputFile OnChange="HandleAvatarUpload" />
                </div>

                <p><strong>Hero Name:</strong> @selectedProfile.HeroName</p>
                <p><strong>Level:</strong> @selectedProfile.Level</p>
                <p><strong>Total XP:</strong> @selectedProfile.TotalXP</p>
                <p><strong>XP to Next Level:</strong> @selectedProfile.XPRequiredForNextLevel</p>

                <div class="mb-3">
                    <label><strong>XP Progress:</strong></label>
                    <div class="progress">
                        <div class="progress-bar bg-success"
                             role="progressbar"
                             style="width:@($"{selectedProfile.XPProgressPercentage:F0}%")"
                             aria-valuenow="@selectedProfile.XPIntoCurrentLevel"
                             aria-valuemin="0"
                             aria-valuemax="@selectedProfile.XPRequiredForNextLevel">
                            @selectedProfile.XPIntoCurrentLevel / @selectedProfile.XPRequiredForNextLevel XP
                        </div>
                    </div>
                </div>


                <p><strong>Hero Coins:</strong> @selectedProfile.HeroCoins</p>

                <div class="mt-3">
                    <h6>Modify Stats</h6>

                    <div class="mb-2">
                        <label>Add/Subtract XP:</label>
                        <InputNumber @bind-Value="xpChange" class="form-control" />
                        <button class="btn btn-primary mt-1" @onclick="ApplyXPChange">Apply XP</button>
                    </div>

                    <div class="mb-2">
                        <label>Add/Subtract Hero Coins:</label>
                        <InputNumber @bind-Value="coinChange" class="form-control" />
                        <button class="btn btn-success mt-1" @onclick="ApplyCoinChange">Apply Coins</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="d-flex flex-column gap-2 mb-4">
        <button class="btn btn-warning" @onclick="ResetXP">🔄 Reset XP</button>
        <button class="btn btn-danger" @onclick="WipeQuests">🗑️ Wipe All Quests</button>
        <button class="btn btn-dark" @onclick="WipeEverything">💥 Delete User & All Data</button>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info">@statusMessage</div>
    }
}

@code {
    private List<User> allUsers = new();
    private List<HeroProfile> allProfiles = new();
    private User? selectedUser;
    private HeroProfile? selectedProfile;
    private string? statusMessage;

    private int xpChange = 0;
    private int coinChange = 0;

    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserManager.Users.ToListAsync();
        allProfiles = await DevToolService.GetAllHeroProfilesAsync();

        selectedUser = allUsers.FirstOrDefault();
        if (selectedUser is not null)
        {
            selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
        }
    }

    private async Task OnUserSelected(ChangeEventArgs e)
    {
        var userId = e.Value?.ToString();
        selectedUser = allUsers.FirstOrDefault(u => u.Id == userId);
        if (selectedUser is not null)
        {
            selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
        }
    }

    private async Task ApplyXPChange()
    {
        if (selectedUser is not null)
        {
            await DevToolService.ModifyXPAsync(selectedUser.Id, xpChange);
            await Task.Delay(50);
            selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
            statusMessage = $"✅ {xpChange} XP applied.";
            xpChange = 0;
        }
    }

    private async Task ApplyCoinChange()
    {
        if (selectedUser is not null)
        {
            await DevToolService.ModifyCoinsAsync(selectedUser.Id, coinChange);
            selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
            statusMessage = $"✅ {coinChange} coins applied.";
            coinChange = 0;
        }
    }

    private async Task ResetXP()
    {
        if (selectedUser is not null)
        {
            await DevToolService.ResetXPAsync(selectedUser.Id);
            selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
            statusMessage = "✅ XP reset.";
        }
    }

    private async Task WipeQuests()
    {
        if (selectedUser is not null)
        {
            await DevToolService.WipeUserQuestsAsync(selectedUser.Id);
            statusMessage = "✅ All quests wiped.";
        }
    }

    private async Task WipeEverything()
    {
        if (selectedUser is not null)
        {
            await DevToolService.WipeUserDataAsync(selectedUser.Id);
            statusMessage = "⚠️ User and all related data deleted.";
            allUsers = await UserManager.Users.ToListAsync();
            allProfiles = await DevToolService.GetAllHeroProfilesAsync();
            selectedUser = allUsers.FirstOrDefault();
            if (selectedUser is not null)
            {
                selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
            }
        }
    }

    private async Task HandleAvatarUpload(InputFileChangeEventArgs e)
    {
        if (selectedUser is null || e.File is null) return;

        var result = await DevToolService.UpdateAvatarAsync(selectedUser.Id, e.File);

        if (result)
        {
            selectedProfile = await DevToolService.GetHeroProfileAsync(selectedUser.Id);
            statusMessage = "✅ Profile picture updated.";
        }
        else
        {
            statusMessage = "❌ Failed to update profile picture.";
        }
    }
}
